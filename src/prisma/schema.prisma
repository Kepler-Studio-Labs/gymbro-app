datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  workoutExercises WorkoutExercise[]
  workoutSchemas WorkoutSchema[]
  workouts Workout[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model WorkoutExercise {
  id String @unique @default(cuid())
  name String
  sets Int
  minReps Int
  maxReps Int?
  restSeconds Int
  degresive Boolean

  exercisesInstances WorkoutExerciseInstance[]

  schemaId String
  schema WorkoutSchema @relation(fields: [schemaId], references: [id], onDelete: Cascade)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkoutSchema {
  id String @unique @default(cuid())

  name String @default("Unnamed workout")

  exercises WorkoutExercise[]

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  workouts Workout[]
}

model WorkoutExerciseInstance {
  id String @unique @default(cuid())

  reps Int
  weight Float?
  restSeconds Int?
  degresive Boolean
  degresiveReps Int?
  degresiveWeight Float?
  
  exerciseId String
  exercise WorkoutExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  workoutId String
  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}

model Workout {
  id String @unique @default(cuid())
  date DateTime @default(now())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  exercisesInstances WorkoutExerciseInstance[]

  schemaId String
  schema WorkoutSchema @relation(fields: [schemaId], references: [id], onDelete: Cascade)
}
